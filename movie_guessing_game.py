import random
from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

movies_with_emojis = [
    {"title": "–ö–æ—Ä–æ–ª—å –õ–µ–≤", "emoji": "ü¶ÅüëëüåÖ"},
    {"title": "–¢–∏—Ç–∞–Ω–∏–∫", "emoji": "üö¢‚ùÑÔ∏èüíî"},
    {"title": "–ú–∞—Ç—Ä–∏—Ü–∞", "emoji": "üíªüï∂Ô∏èüî´"},
    {"title": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", "emoji": "‚ö°üßô‚Äç‚ôÇÔ∏èü¶â"},
    {"title": "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫", "emoji": "üï∑Ô∏èüï∏Ô∏èü¶∏‚Äç‚ôÇÔ∏è"},
]

def get_random_movie():
    return random.choice(movies_with_emojis)

def register_handlers_guess_movie(dp, user_states, user_history):
    @router.message(lambda message: message.text.lower() == "üéÆ —É–≥–∞–¥–∞–π —Ñ–∏–ª—å–º")
    async def start_guess_movie(message: types.Message):
        random_movie = get_random_movie()
        user_states[message.from_user.id] = "guess_movie"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
        user_history[message.from_user.id] = random_movie  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            f"üé≤ –£–≥–∞–¥–∞–π—Ç–µ —Ñ–∏–ª—å–º –ø–æ —ç–º–æ–¥–∑–∏: {random_movie['emoji']}\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")]
            ])
        )

    @router.message(lambda message: message.from_user.id in user_history)
    async def check_guess(message: types.Message):
        random_movie = user_history.get(message.from_user.id)
        if message.text.lower() == random_movie['title'].lower():
            await message.answer(
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –±—ã–ª —Ñ–∏–ª—å–º: {random_movie['title']}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")],
                    [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ", callback_data="play_again")]
                ])
            )
            user_states.pop(message.from_user.id, None)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_history.pop(message.from_user.id, None)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        else:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data="show_answer")]
                ])
            )

    @router.callback_query(lambda c: c.data == "show_answer")
    async def show_answer(callback: types.CallbackQuery):
        random_movie = user_history.get(callback.from_user.id)
        if not random_movie:
            await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, –≤—ã–±—Ä–∞–≤ 'üéÆ –£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º'.")
            return

        await callback.message.answer(
            f"‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {random_movie['title']}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")],
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ", callback_data="play_again")]
            ])
        )
        user_states.pop(callback.from_user.id, None)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_history.pop(callback.from_user.id, None)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        await callback.answer()

    @router.callback_query(lambda c: c.data == "play_again")
    async def play_again(callback: types.CallbackQuery):
        random_movie = get_random_movie()
        user_states[callback.from_user.id] = "guess_movie"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
        user_history[callback.from_user.id] = random_movie  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            f"üé≤ –£–≥–∞–¥–∞–π—Ç–µ —Ñ–∏–ª—å–º –ø–æ —ç–º–æ–¥–∑–∏: {random_movie['emoji']}\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")]
            ])
        )
        await callback.answer()

    @router.callback_query(lambda c: c.data == "go_home")
    async def go_home(callback: types.CallbackQuery):
        from main import main_kb  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
        await callback.answer()

    dp.include_router(router)