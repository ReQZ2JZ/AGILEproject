from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from typing import Callable, Awaitable
import logging
from functools import partial

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, –≥–¥–µ —á—Ç–æ –ª–æ–º–∞–µ—Ç—Å—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class MovieDescriptionState(StatesGroup):
    WaitingForMovie = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π"
async def movie_description_handler(message: types.Message, state: FSMContext):
    logging.info(f"–Æ–∑–µ—Ä {message.from_user.id} —Ö–æ—á–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
    await state.set_state(MovieDescriptionState.WaitingForMovie)
    await message.answer("üé• –ù–∞–∑–æ–≤–∏ —Ñ–∏–ª—å–º, –∏ —è –∑–∞—Ñ–∏–≥–∞—á—É –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
async def handle_movie_description(message: types.Message, state: FSMContext, get_movie_recommendation: Callable[[str], Awaitable[str]]):
    movie_name = message.text.strip()  # –ß–∏—Å—Ç–∏–º –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã –Ω–µ —Ç—É–ø–∏–ª–æ
    logging.info(f"–Æ–∑–µ—Ä {message.from_user.id} –≤–≤–µ–ª —Ñ–∏–ª—å–º: {movie_name}")
    
    await message.answer("üîé –©–∞ –ø–æ–∏—â—É –æ–ø–∏—Å–∞–Ω–∏–µ...")
    
    try:
        prompt = f"–û–ø–∏—à–∏ —Ñ–∏–ª—å–º '{movie_name}' –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π."
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ get_movie_recommendation: {prompt}")
        

        description = await get_movie_recommendation(prompt)  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤
        
        logging.info(f"–ü–æ–ª—É—á–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        if description:
            await message.answer(f"üé• {movie_name}:\n{description}")
        else:
            logging.warning(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{movie_name}' –ø—É—Å—Ç–æ–µ")
            await message.answer("üòî –ù–µ –Ω–∞—à–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ—Ä—è–Ω, –±—Ä–æ.")
    except Exception as e:
        logging.error(f"–ö–æ—Å—è–∫ –≤ handle_movie_description: {e}", exc_info=True)
        await message.answer("üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫.")
    finally:
        logging.info("–ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM")
        await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers_movie_description(dp: Dispatcher, get_movie_recommendation: Callable[[str], Awaitable[str]]):
    logging.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞")
    dp.message.register(movie_description_handler, F.text.lower() == "üé• –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π")
    dp.message.register(
        partial(handle_movie_description, get_movie_recommendation=get_movie_recommendation),
        MovieDescriptionState.WaitingForMovie
    )