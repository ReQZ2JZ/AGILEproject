from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from openai import OpenAI
import logging
import re

router = Router()
OPENROUTER_API_KEY = "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"
client = OpenAI(api_key=OPENROUTER_API_KEY, base_url="https://openrouter.ai/api/v1")

reaction_kb = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text="üëç", callback_data="like"),
     types.InlineKeyboardButton(text="üëé", callback_data="dislike")],
    [types.InlineKeyboardButton(text="üíæ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")]
])

class DirectorActorStates(StatesGroup):
    WaitingForName = State()

async def generate_director_actor_recommendations(name: str) -> str:
    prompt = (
        f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∏–º—è: '{name}'. "
        "–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–º—è —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–º –∏–ª–∏ –∞–∫—Ç–µ—Ä–æ–º, –∏ —Å–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 3-5 —Ñ–∏–ª—å–º–æ–≤, "
        "–≥–¥–µ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –∏–≥—Ä–∞–ª –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å (–∫–∞–∫ —Ä–µ–∂–∏—Å—Å–µ—Ä –∏–ª–∏ –∞–∫—Ç–µ—Ä). "
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞ —É–∫–∞–∂–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
        "—Ä–æ–ª—å —á–µ–ª–æ–≤–µ–∫–∞ (—Ä–µ–∂–∏—Å—Å–µ—Ä –∏–ª–∏ –∞–∫—Ç–µ—Ä). –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Ç–∞–∫:\n\n"
        "**–ù–∞–∑–≤–∞–Ω–∏–µ (–ì–æ–¥)**\n–û–ø–∏—Å–∞–Ω–∏–µ: ...\n–†–æ–ª—å: ...\n\n"
        "–ï—Å–ª–∏ –∏–º—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ, –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é, —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
    )
    try:
        completion = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )
        response = completion.choices[0].message.content.strip()
        if not response or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in response.lower():
            return f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –¥–ª—è '{name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ!"
        response = re.sub(r'^\d+\.\s*', '', response, flags=re.MULTILINE)
        return response
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è '{name}': {e}")
        return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

@router.message(F.text.lower() == "üé≠ —Ä–µ–∂–∏—Å—Å–µ—Ä/–∞–∫—Ç–µ—Ä")
async def director_actor_start(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª '–†–µ–∂–∏—Å—Å–µ—Ä/–ê–∫—Ç–µ—Ä'")
    await state.clear()
    await message.answer(
        "üé≠ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –∏–ª–∏ –∞–∫—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω' –∏–ª–∏ '–õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ'):",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(DirectorActorStates.WaitingForName)

@router.message(DirectorActorStates.WaitingForName)
async def process_director_actor_name(message: types.Message, state: FSMContext, user_history: dict):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {message.text}")
    if message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üé¨ –§–∏–ª—å–º –¥–Ω—è")],
                [types.KeyboardButton(text="üìö –ñ–∞–Ω—Ä—ã"), types.KeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏")],
                [types.KeyboardButton(text="üéû –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"), types.KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
                [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton(text="üß† –ò–ò-—á–∞—Ç")],
                [types.KeyboardButton(text="üéÆ –£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º"), types.KeyboardButton(text="üìã –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ")],
                [types.KeyboardButton(text="üé® –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏"), types.KeyboardButton(text="üé≠ –†–µ–∂–∏—Å—Å–µ—Ä/–ê–∫—Ç–µ—Ä")],
                [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
            ],
            resize_keyboard=True
        ))
        await state.clear()
        return

    await message.answer(f"üîé –ò—â—É —Ñ–∏–ª—å–º—ã —Å '{message.text}'...")
    result = await generate_director_actor_recommendations(message.text)
    user_history.setdefault(message.from_user.id, []).append(f"–†–µ–∂–∏—Å—Å–µ—Ä/–ê–∫—Ç–µ—Ä: {message.text}")
    await message.answer(result, reply_markup=reaction_kb)
    await state.clear()

def register_handlers_director_actor(dp):
    dp.include_router(router)