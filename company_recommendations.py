from aiogram import types, Dispatcher, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from typing import Dict
import logging

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
company_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üë´ –° –¥—Ä—É–∑—å—è–º–∏", callback_data="company_friends")],
    [InlineKeyboardButton(text="‚ù§Ô∏è –° –ø–∞—Ä–æ–π", callback_data="company_couple")],
    [InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –° —Å–µ–º—å–µ–π", callback_data="company_family")],
    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏"
async def company_recommendations_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üë• –° –∫–µ–º –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º?", reply_markup=company_kb)

# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
async def company_callback(callback: types.CallbackQuery, user_history: Dict[int, list], get_movie_recommendation):
    company = callback.data.replace("company_", "")
    if company == "friends":
        query = "–§–∏–ª—å–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –¥—Ä—É–∑—å—è–º–∏: –∫–æ–º–µ–¥–∏–∏, —ç–∫—à–µ–Ω—ã, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è."
    elif company == "couple":
        query = "–§–∏–ª—å–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –ø–∞—Ä–æ–π: —Ä–æ–º–∞–Ω—Ç–∏–∫–∞, –¥—Ä–∞–º—ã, –º–µ–ª–æ–¥—Ä–∞–º—ã."
    elif company == "family":
        query = "–§–∏–ª—å–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Å–µ–º—å–µ–π: —Å–µ–º–µ–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã, –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è."
    else:
        query = "–§–∏–ª—å–º—ã –¥–ª—è –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."
    
    await callback.message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {query}")
    try:
        result = await get_movie_recommendation(query)
        if not isinstance(user_history.get(callback.from_user.id), list):
            user_history[callback.from_user.id] = []
        user_history[callback.from_user.id].append(f"–ö–æ–º–ø–∞–Ω–∏—è: {company}")
        await callback.message.answer(result)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ company_callback: {e}")
        await callback.message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        await callback.answer()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ callback

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers_company(dp: Dispatcher, user_history: Dict[int, list], get_movie_recommendation):
    dp.message.register(company_recommendations_handler, F.text.lower() == "üë• —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏")
    dp.callback_query.register(
        lambda callback: company_callback(callback, user_history, get_movie_recommendation),
        F.data.startswith("company_")
    )