# thematic_collections.py

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery  # –î–æ–±–∞–≤–ª–µ–Ω CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
OPENROUTER_API_KEY = "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"
client = OpenAI(api_key=OPENROUTER_API_KEY, base_url="https://openrouter.ai/api/v1")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞)
user_history = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CollectionStates(StatesGroup):
    WaitingForQuery = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
back_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)

reaction_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üëç", callback_data="like"),
     InlineKeyboardButton(text="üëé", callback_data="dislike")],
    [InlineKeyboardButton(text="üíæ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")]
])

async def generate_thematic_collection(query: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥–±–æ—Ä–∫—É —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """
    prompt = (
        f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥–±–æ—Ä–∫—É: '{query}'. "
        f"–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 3-5 —Ñ–∏–ª—å–º–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞ —É–∫–∞–∂–∏: "
        f"–Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
        f"–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
    )
    try:
        completion = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–±–æ—Ä–∫–∏: {e}")
        return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@router.message(F.text.lower() == "üìΩ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏")
async def thematic_collection_start(message: Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–±–æ—Ä–∫–∏.
    """
    await message.answer(
        "üìΩ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–±–æ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∏–ª—å–º—ã —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ñ–∏–Ω–∞–ª–æ–º' –∏–ª–∏ '–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Ç—Ä–∏–ª–ª–µ—Ä—ã'):",
        reply_markup=back_kb
    )
    await state.set_state(CollectionStates.WaitingForQuery)

@router.message(CollectionStates.WaitingForQuery)
async def process_collection_query(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–±–æ—Ä–∫–∏.
    """
    query = message.text.strip()
    if not query:
        await message.answer("üòï –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await message.answer("üîé –§–æ—Ä–º–∏—Ä—É—é –ø–æ–¥–±–æ—Ä–∫—É...")
    result = await generate_thematic_collection(query)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history.setdefault(message.from_user.id, []).append(f"–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–±–æ—Ä–∫–∞: {query}")

    await message.answer(result, reply_markup=reaction_kb)
    await state.clear()

@router.message(F.text.lower() == "üîô –Ω–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã).
    """
    await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=None)
    await state.clear()

@router.callback_query(F.data == "like")
async def like_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫ –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏.
    """
    await callback.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!")

@router.callback_query(F.data == "dislike")
async def dislike_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∑–ª–∞–π–∫ –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏.
    """
    await callback.answer("üëé –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

@router.callback_query(F.data == "add_favorite")
async def favorite_handler(callback: CallbackQuery):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–±–æ—Ä–∫—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–Ω—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è).
    """
    await callback.answer("üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")