from aiogram import types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router()

watch_later_list = {}

class WatchLaterStates(StatesGroup):
    AddingMovie = State()
    DeletingMovie = State()

watch_later_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º"), KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º")],
    [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
], resize_keyboard=True)

@router.message(lambda message: message.text.lower() == "üìã —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ")
async def show_watch_later_list(message: types.Message):
    user_id = message.from_user.id
    movies = watch_later_list.get(user_id, [])

    if not movies:
        await message.answer("üìú –í–∞—à —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ' –ø—É—Å—Ç.", reply_markup=watch_later_kb)
    else:
        movies_text = "\n".join([f"‚Ä¢ {movie}" for movie in movies])
        await message.answer(f"üìú –í–∞—à —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ':\n{movies_text}", reply_markup=watch_later_kb)

@router.message(lambda message: message.text.lower() == "‚ûï –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
async def add_to_watch_later_prompt(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ':")
    await state.set_state(WatchLaterStates.AddingMovie)

@router.message(WatchLaterStates.AddingMovie)
async def save_movie_to_watch_later(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    movie_title = message.text.strip()

    if user_id not in watch_later_list:
        watch_later_list[user_id] = []

    watch_later_list[user_id].append(movie_title)
    await message.answer(f"üé• –§–∏–ª—å–º '{movie_title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ'!", reply_markup=watch_later_kb)
    await state.clear()

@router.message(lambda message: message.text.lower() == "üìã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
async def show_watch_later_list_again(message: types.Message):
    user_id = message.from_user.id
    movies = watch_later_list.get(user_id, [])

    if not movies:
        await message.answer("üìú –í–∞—à —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ' –ø—É—Å—Ç.", reply_markup=watch_later_kb)
    else:
        movies_text = "\n".join([f"‚Ä¢ {movie}" for movie in movies])
        await message.answer(f"üìú –í–∞—à —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ':\n{movies_text}", reply_markup=watch_later_kb)

@router.message(lambda message: message.text.lower() == "üóë —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º")
async def delete_from_watch_later_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    movies = watch_later_list.get(user_id, [])

    if not movies:
        await message.answer("üìú –í–∞—à —Å–ø–∏—Å–æ–∫ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ' –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=watch_later_kb)
    else:
        movies_text = "\n".join([f"{i + 1}. {movie}" for i, movie in enumerate(movies)])
        await message.answer(f"üóë –í–∞—à —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n{movies_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        await state.set_state(WatchLaterStates.DeletingMovie)

@router.message(WatchLaterStates.DeletingMovie)
async def confirm_delete_movie(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    movies = watch_later_list.get(user_id, [])

    try:
        index = int(message.text.strip()) - 1
        if 0 <= index < len(movies):
            removed_movie = movies.pop(index)
            await message.answer(f"‚úÖ –§–∏–ª—å–º '{removed_movie}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ'.", reply_markup=watch_later_kb)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=watch_later_kb)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.", reply_markup=watch_later_kb)

    await state.clear()

@router.message(lambda message: message.text.lower() == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_to_main_menu(message: types.Message):
    from main import main_kb
    await message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)