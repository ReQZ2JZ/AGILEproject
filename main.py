import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from openai import OpenAI
import logging

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–ª—é—á–∏ –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é
BOT_TOKEN = "7847598451:AAH8B9-S2QPOznckDlKJZSoSpDs1SLphQ34"
OPENROUTER_API_KEY = "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"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def get_movie_recommendation(query: str):
    prompt = f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º, —Å–µ—Ä–∏–∞–ª–∞–º –∏ –∞–Ω–∏–º–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: '{query}'.
    –ü–æ–¥–±–µ—Ä–∏ 3 –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–∞–π—Ç–ª–∞ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏. –§–æ—Ä–º–∞—Ç:

    1. –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ.
    2. –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ.
    3. –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    try:
        completion = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ScreenFox ‚Äî –ø–æ–¥–±–∏—Ä–∞—é —Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã –∏ –∞–Ω–∏–º–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É –∏–ª–∏ –∂–∞–Ω—Ä.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n- —Ç—Ä–∏–ª–ª–µ—Ä —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ü–æ–≤–∫–æ–π\n- —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∞–Ω–∏–º–µ\n- —Å–µ—Ä–∏–∞–ª –∫–∞–∫ –í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /movie
@dp.message(Command("movie"))
async def movie_of_the_day(message: types.Message):
    await message.answer("üé¨ –í—ã–±–∏—Ä–∞—é —Ñ–∏–ª—å–º –¥–Ω—è...")
    result = await get_movie_recommendation("—Ñ–∏–ª—å–º –¥–Ω—è")
    await message.answer(f"üçø –§–∏–ª—å–º –¥–Ω—è:\n\n{result}")

# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
@dp.message(F.text)
async def query_handler(message: types.Message):
    await message.answer("üîé –ò—â—É –ø–æ–¥–±–æ—Ä–∫—É...")
    result = await get_movie_recommendation(message.text)
    await message.answer(f"üìΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{result}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ ScreenFox –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())