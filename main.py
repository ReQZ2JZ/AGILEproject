import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiohttp

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–ª—é—á–∏ –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é
BOT_TOKEN = "7847598451:AAH8B9-S2QPOznckDlKJZSoSpDs1SLphQ34"
OPENROUTER_API_KEY = "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"
TMDB_API_KEY = "941d2663b8c7da9e88d80d9ac8e48105"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —è–∑—ã–∫–æ–≤
user_ids = set()
user_language = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üé¨ –§–∏–ª—å–º –¥–Ω—è")],
    [KeyboardButton(text="üìö –ñ–∞–Ω—Ä—ã"), KeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏")],
    [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
], resize_keyboard=True)

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∂–∞–Ω—Ä–æ–≤
genres_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üé≠ –î—Ä–∞–º–∞", callback_data="genre_–¥—Ä–∞–º–∞"),
     InlineKeyboardButton(text="üòÇ –ö–æ–º–µ–¥–∏—è", callback_data="genre_–∫–æ–º–µ–¥–∏—è")],
    [InlineKeyboardButton(text="üé¢ –¢—Ä–∏–ª–ª–µ—Ä", callback_data="genre_—Ç—Ä–∏–ª–ª–µ—Ä"),
     InlineKeyboardButton(text="üí• –ë–æ–µ–≤–∏–∫", callback_data="genre_–±–æ–µ–≤–∏–∫")],
    [InlineKeyboardButton(text="üíò –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="genre_—Ä–æ–º–∞–Ω—Ç–∏–∫–∞"),
     InlineKeyboardButton(text="üé• –ê–Ω–∏–º–µ", callback_data="genre_–∞–Ω–∏–º–µ")]
])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç OpenRouter (GPT)
async def get_movie_recommendation(query: str):
    prompt = f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º, —Å–µ—Ä–∏–∞–ª–∞–º –∏ –∞–Ω–∏–º–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: '{query}'.
    –ü–æ–¥–±–µ—Ä–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª –∏–ª–∏ –∞–Ω–∏–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–∞–π—Ç–ª—ã —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏. –§–æ—Ä–º–∞—Ç:
    1. –ù–ê–ó–í–ê–ù–ò–ï (–≥–æ–¥) - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    try:
        completion = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–Ω—è —Å TMDB
async def get_tmdb_trending_movie():
    url = f"https://api.themoviedb.org/3/trending/movie/day?api_key={TMDB_API_KEY}&language=ru-RU"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            if data.get("results"):
                movie = data["results"][0]
                title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return f"üé¨ {title}\n\n{overview}"
            return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º –¥–Ω—è."

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_ids.add(message.from_user.id)
    user_language[message.from_user.id] = "ru"
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ScreenFox ‚Äî –ø–æ–¥–±–∏—Ä–∞—é —Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã –∏ –∞–Ω–∏–º–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É –∏–ª–∏ –∂–∞–Ω—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_kb
    )

# –§–∏–ª—å–º –¥–Ω—è
@dp.message(F.text.lower() == "üé¨ —Ñ–∏–ª—å–º –¥–Ω—è")
async def movie_of_the_day(message: types.Message):
    await message.answer("üé¨ –í—ã–±–∏—Ä–∞—é —Ñ–∏–ª—å–º –¥–Ω—è...")
    result = await get_tmdb_trending_movie()
    await message.answer(f"üçø –§–∏–ª—å–º –¥–Ω—è:\n\n{result}")

# –ü–æ–¥—Å–∫–∞–∑–∫–∏
@dp.message(F.text.lower() == "üí° –ø–æ–¥—Å–∫–∞–∑–∫–∏")
async def tips_handler(message: types.Message):
    await message.answer("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n- —Ç—Ä–∏–ª–ª–µ—Ä —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ü–æ–≤–∫–æ–π\n- –∫–æ–º–µ–¥–∏—è 2020-—Ö –≥–æ–¥–æ–≤\n- —Å–µ—Ä–∏–∞–ª –∫–∞–∫ –í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ\n- —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∞–Ω–∏–º–µ")

# –ñ–∞–Ω—Ä—ã
@dp.message(F.text.lower() == "üìö –∂–∞–Ω—Ä—ã")
async def genre_menu(message: types.Message):
    await message.answer("üìö –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä, –∏ —è –ø–æ–¥–±–µ—Ä—É —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:", reply_markup=genres_kb)

# Inline callback –ø–æ –∂–∞–Ω—Ä–∞–º
@dp.callback_query()
async def genre_callback(callback: types.CallbackQuery):
    genre = callback.data.replace("genre_", "")
    await callback.message.answer(f"üîç –ò—â—É —á—Ç–æ-—Ç–æ –≤ –∂–∞–Ω—Ä–µ: {genre}...")
    result = await get_movie_recommendation(f"–§–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}")
    await callback.message.answer(result)
    await callback.answer()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.message(F.text.lower() == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ. –°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å \"–§–∏–ª—å–º –¥–Ω—è\" ‚Äî –Ω–∞–ø–∏—à–∏ '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è'.")

# –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
@dp.message(F.text)
async def query_handler(message: types.Message):
    user_ids.add(message.from_user.id)
    await message.answer("üîé –ò—â—É –ø–æ–¥–±–æ—Ä–∫—É...")
    result = await get_movie_recommendation(message.text)
    await message.answer(f"üìΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{result}")

# –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–∏–ª—å–º–∞ –¥–Ω—è
async def send_daily_recommendation():
    if user_ids:
        text = await get_tmdb_trending_movie()
        for uid in user_ids:
            try:
                await bot.send_message(uid,f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —Ñ–∏–ª—å–º –¥–Ω—è –æ—Ç ScreenFox:\n\n{text}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

# –ó–∞–ø—É—Å–∫
async def main():
    scheduler.add_job(send_daily_recommendation, trigger='cron', hour=9, minute=0)
    scheduler.start()
    print("‚úÖ ScreenFox –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
