import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiohttp

BOT_TOKEN = "7847598451:AAH8B9-S2QPOznckDlKJZSoSpDs1SLphQ34"
OPENROUTER_API_KEY = "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"
TMDB_API_KEY = "941d2663b8c7da9e88d80d9ac8e48105"

logging.basicConfig(level=logging.INFO)

client = OpenAI(api_key=OPENROUTER_API_KEY, base_url="https://openrouter.ai/api/v1")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

user_ids = set()
user_language = {}
user_subscriptions = set()
user_history = {}
user_favorites = {}
user_reactions = {}

main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üé¨ –§–∏–ª—å–º –¥–Ω—è")],
    [KeyboardButton(text="üìö –ñ–∞–Ω—Ä—ã"), KeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏")],
    [KeyboardButton(text="üéû –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"), KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
    [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üß† –ò–ò-—á–∞—Ç")],
    [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
], resize_keyboard=True)

back_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)

genres_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üé≠ –î—Ä–∞–º–∞", callback_data="genre_–¥—Ä–∞–º–∞"),
     InlineKeyboardButton(text="üòÇ –ö–æ–º–µ–¥–∏—è", callback_data="genre_–∫–æ–º–µ–¥–∏—è")],
    [InlineKeyboardButton(text="üé¢ –¢—Ä–∏–ª–ª–µ—Ä", callback_data="genre_—Ç—Ä–∏–ª–ª–µ—Ä"),
     InlineKeyboardButton(text="üí• –ë–æ–µ–≤–∏–∫", callback_data="genre_–±–æ–µ–≤–∏–∫")],
    [InlineKeyboardButton(text="üíò –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="genre_—Ä–æ–º–∞–Ω—Ç–∏–∫–∞"),
     InlineKeyboardButton(text="üé• –ê–Ω–∏–º–µ", callback_data="genre_–∞–Ω–∏–º–µ")],
    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")]
])

settings_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üåç –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π (—Å–∫–æ—Ä–æ)", callback_data="lang_ru")],
    [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '–§–∏–ª—å–º –¥–Ω—è'", callback_data="subscribe")],
    [InlineKeyboardButton(text="üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")]
])

reaction_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üëç", callback_data="like"),
     InlineKeyboardButton(text="üëé", callback_data="dislike")],
    [InlineKeyboardButton(text="üíæ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")]
])

async def get_movie_recommendation(query: str):
    lowered = query.lower()
    one_film_request = any(keyword in lowered for keyword in ["–æ–¥–∏–Ω —Ñ–∏–ª—å–º", "1 —Ñ–∏–ª—å–º", "—á—Ç–æ-—Ç–æ –æ–¥–Ω–æ", "–∫–∞–∫–æ–π —Ñ–∏–ª—å–º", "–≤ –∫–∞–∫–æ–º —Ñ–∏–ª—å–º–µ", "—á—Ç–æ –∑–∞ —Ñ–∏–ª—å–º", "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"])
    if one_film_request:
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –ö–û–ù–ö–†–ï–¢–ù–´–ô —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Å—Ü–µ–Ω–µ. –û—Ç–≤–µ—Ç—å –ù–ê–ó–í–ê–ù–ò–ï–ú –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é: '{query}'. –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–ø–∏—Å–æ–∫, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
    else:
        prompt = f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç: '{query}'. –î–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    try:
        completion = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
    
async def get_tmdb_trending_movie():
    url = f"https://api.themoviedb.org/3/trending/movie/day?api_key={TMDB_API_KEY}&language=ru-RU"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            if data.get("results"):
                movie = data["results"][0]
                return f"üé¨ {movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n{movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}", movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º –¥–Ω—è.", None

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_ids.add(message.from_user.id)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ScreenFox. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message(F.text.lower() == "üé¨ —Ñ–∏–ª—å–º –¥–Ω—è")
async def movie_of_the_day(message: types.Message):
    await message.answer("üé¨ –ò—â—É —Ñ–∏–ª—å–º –¥–Ω—è...")
    result, title = await get_tmdb_trending_movie()
    user_history.setdefault(message.from_user.id, []).append(title)
    await message.answer(result, reply_markup=reaction_kb)

@dp.message(F.text.lower() == "üí° –ø–æ–¥—Å–∫–∞–∑–∫–∏")
async def tips_handler(message: types.Message):
    await message.answer("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n- –∫–æ–º–µ–¥–∏—è 2020-—Ö\n- –±–æ–µ–≤–∏–∫ –∫–∞–∫ –î–∂–æ–Ω –£–∏–∫\n- —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∞–Ω–∏–º–µ", reply_markup=back_kb)

@dp.message(F.text.lower() == "üìö –∂–∞–Ω—Ä—ã")
async def genre_menu(message: types.Message):
    await message.answer("üìö –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=genres_kb)

@dp.callback_query(F.data.startswith("genre_"))
async def genre_callback(callback: types.CallbackQuery):
    genre = callback.data.replace("genre_", "")
    await callback.message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}...")
    result = await get_movie_recommendation(f"–§–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}")
    user_history.setdefault(callback.from_user.id, []).append(f"–ñ–∞–Ω—Ä: {genre}")
    await callback.message.answer(result, reply_markup=reaction_kb)
    await callback.answer()

@dp.message(F.text.lower() == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_kb)

@dp.callback_query(F.data == "subscribe")
async def subscribe_callback(callback: types.CallbackQuery):
    user_subscriptions.add(callback.from_user.id)
    await callback.message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")
    await callback.answer()

@dp.callback_query(F.data == "unsubscribe")
async def unsubscribe_callback(callback: types.CallbackQuery):
    user_subscriptions.discard(callback.from_user.id)
    await callback.message.answer("üö´ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç '–§–∏–ª—å–º–∞ –¥–Ω—è'.")
    await callback.answer()

@dp.callback_query(F.data == "go_home")
async def go_home_callback(callback: types.CallbackQuery):
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    await callback.answer()

@dp.message(F.text.lower() == "üîô –Ω–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message(F.text.lower() == "üéû –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def history_handler(message: types.Message):
    history = user_history.get(message.from_user.id, [])
    text = "\n".join(history[-10:]) if history else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    await message.answer(f"üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{text}")

@dp.message(F.text.lower() == "‚≠ê –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def favorites_handler(message: types.Message):
    favorites = user_favorites.get(message.from_user.id, [])
    text = "\n".join(favorites) if favorites else "‚≠ê –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç."
    await message.answer(text)

@dp.message(F.text.lower() == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message):
    reactions = user_reactions.get(message.from_user.id, {"like": 0, "dislike": 0})
    favs = len(user_favorites.get(message.from_user.id, []))
    await message.answer(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüëç –õ–∞–π–∫–æ–≤: {reactions['like']}\nüëé –î–∏–∑–ª–∞–π–∫–æ–≤: {reactions['dislike']}\n‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {favs}")

@dp.message(F.text.lower() == "üß† –∏–∏-—á–∞—Ç")
async def ai_chat_prompt(message: types.Message):
    await message.answer("üß† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –ò–ò-—ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ —Ñ–∏–ª—å–º–∞–º:")

@dp.callback_query(F.data == "like")
async def like_handler(callback: types.CallbackQuery):
    user_reactions.setdefault(callback.from_user.id, {"like": 0, "dislike": 0})["like"] += 1
    await callback.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!")

@dp.callback_query(F.data == "dislike")
async def dislike_handler(callback: types.CallbackQuery):
    user_reactions.setdefault(callback.from_user.id, {"like": 0, "dislike": 0})["dislike"] += 1
    await callback.answer("üëé –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

@dp.callback_query(F.data == "add_favorite")
async def favorite_handler(callback: types.CallbackQuery):
    message_text = callback.message.text.split('\n')[0].replace("üé¨ ", "").strip()
    user_favorites.setdefault(callback.from_user.id, []).append(message_text)
    await callback.answer("üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

@dp.message(F.text)
async def query_handler(message: types.Message):
    user_ids.add(message.from_user.id)
    user_history.setdefault(message.from_user.id, []).append(message.text)
    await message.answer("üîé –ò—â—É –ø–æ–¥–±–æ—Ä–∫—É...")
    result = await get_movie_recommendation(message.text)
    await message.answer(f"üìΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{result}", reply_markup=reaction_kb)

async def send_daily_recommendation():
    if user_subscriptions:
        text, title = await get_tmdb_trending_movie()
        for uid in user_subscriptions:
            try:
                user_history.setdefault(uid, []).append(title)
                await bot.send_message(uid, f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üé¨ –§–∏–ª—å–º –¥–Ω—è –æ—Ç ScreenFox:\n\n{text}", reply_markup=reaction_kb)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

async def main():
    scheduler.add_job(send_daily_recommendation, trigger='cron', hour=9, minute=0)
    scheduler.start()
    print("‚úÖ ScreenFox –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
