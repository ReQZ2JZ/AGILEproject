import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from openai import OpenAI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiohttp
from movie_guessing_game import register_handlers_guess_movie
from watch_later import router as watch_later_router
from thematic_collections import register_handlers_thematic
from director_actor_recommendations import register_handlers_director_actor
from company_recommendations import register_handlers_company
from movie_description import register_handlers_movie_description
from typing import Callable, Dict, Any, Awaitable

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ API
BOT_TOKEN = "7847598451:AAH8B9-S2QPOznckDlKJZSoSpDs1SLphQ34"
OPENROUTER_API_KEY = "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"
TMDB_API_KEY = "941d2663b8c7da9e88d80d9ac8e48105"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(api_key=OPENROUTER_API_KEY, base_url="https://openrouter.ai/api/v1")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_states = {}
user_ids = set()
user_language = {}
user_subscriptions = set()
user_history = {}
user_favorites = {}
user_reactions = {}

# Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ user_history
class UserHistoryMiddleware(BaseMiddleware):
    def __init__(self, user_history: dict):
        self.user_history = user_history
        super().__init__()

    async def __call__(
        self,
        handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
        event: types.Message,
        data: Dict[str, Any]
    ) -> Any:
        logging.info(f"Middleware –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        data['user_history'] = self.user_history
        return await handler(event, data)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    AIChat = State()
    Tips = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üé¨ –§–∏–ª—å–º –¥–Ω—è")],
    [KeyboardButton(text="üìö –ñ–∞–Ω—Ä—ã"), KeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏")],
    [KeyboardButton(text="üéû –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"), KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
    [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üß† –ò–ò-—á–∞—Ç")],
    [KeyboardButton(text="üéÆ –£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º"), KeyboardButton(text="üìã –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ")],
    [KeyboardButton(text="üé® –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏"), KeyboardButton(text="üé≠ –†–µ–∂–∏—Å—Å–µ—Ä/–ê–∫—Ç–µ—Ä")],
    [KeyboardButton(text="üë• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏"), KeyboardButton(text="üé• –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π")],
    [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
], resize_keyboard=True)

back_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)

genres_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üé≠ –î—Ä–∞–º–∞", callback_data="genre_–¥—Ä–∞–º–∞"),
     InlineKeyboardButton(text="üòÇ –ö–æ–º–µ–¥–∏—è", callback_data="genre_–∫–æ–º–µ–¥–∏—è")],
    [InlineKeyboardButton(text="üé¢ –¢—Ä–∏–ª–ª–µ—Ä", callback_data="genre_—Ç—Ä–∏–ª–ª–µ—Ä"),
     InlineKeyboardButton(text="üí• –ë–æ–µ–≤–∏–∫", callback_data="genre_–±–æ–µ–≤–∏–∫")],
    [InlineKeyboardButton(text="üíò –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="genre_—Ä–æ–º–∞–Ω—Ç–∏–∫–∞"),
     InlineKeyboardButton(text="üé• –ê–Ω–∏–º–µ", callback_data="genre_–∞–Ω–∏–º–µ")],
    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")]
])

settings_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üåç –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π (—Å–∫–æ—Ä–æ)", callback_data="lang_ru")],
    [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '–§–∏–ª—å–º –¥–Ω—è'", callback_data="subscribe")],
    [InlineKeyboardButton(text="üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_home")]
])

reaction_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üëç", callback_data="like"),
     InlineKeyboardButton(text="üëé", callback_data="dislike")],
    [InlineKeyboardButton(text="üíæ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")]
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
async def get_movie_recommendation(query: str):
    prompt = f"–û–ø–∏—à–∏ —Ñ–∏–ª—å–º '{query}' –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π."
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API: {query}")
        completion = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –¥–Ω—è –æ—Ç TMDB
async def get_tmdb_trending_movie():
    url = f"https://api.themoviedb.org/3/trending/movie/day?api_key={TMDB_API_KEY}&language=ru-RU"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logging.error(f"–û—à–∏–±–∫–∞ TMDB API: –°—Ç–∞—Ç—É—Å {response.status}, {await response.text()}")
                    return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º –¥–Ω—è.", None
                data = await response.json()
                logging.info(f"–û—Ç–≤–µ—Ç TMDB: {data}")
                if data.get("results"):
                    movie = data["results"][0]
                    return (
                        f"üé¨ {movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n{movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}",
                        movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    )
                logging.warning("TMDB API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return "üòî –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", None
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ TMDB: {e}")
        return "üòî –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ –æ—Ç–≤–µ—Ç–µ TMDB: {e}")
        return "üòî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.", None
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_tmdb_trending_movie: {e}")
        return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    user_ids.add(message.from_user.id)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ScreenFox. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=main_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–§–∏–ª—å–º –¥–Ω—è"
@dp.message(F.text.lower() == "üé¨ —Ñ–∏–ª—å–º –¥–Ω—è")
async def movie_of_the_day(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üé¨ –ò—â—É —Ñ–∏–ª—å–º –¥–Ω—è...")
    result, title = await get_tmdb_trending_movie()
    if title:
        if not isinstance(user_history.get(message.from_user.id), list):
            user_history[message.from_user.id] = []
        user_history[message.from_user.id].append(title)
    await message.answer(result, reply_markup=reaction_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–¥—Å–∫–∞–∑–∫–∏"
@dp.message(F.text.lower() == "üí° –ø–æ–¥—Å–∫–∞–∑–∫–∏")
async def tips_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n- –∫–æ–º–µ–¥–∏—è 2020-—Ö\n- –±–æ–µ–≤–∏–∫ –∫–∞–∫ –î–∂–æ–Ω –£–∏–∫\n- —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∞–Ω–∏–º–µ", reply_markup=back_kb)
    await state.set_state(UserStates.Tips)

@dp.message(UserStates.Tips)
async def handle_tips(message: types.Message, state: FSMContext):
    await message.answer("üîé –ò—â—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    result = await get_movie_recommendation(message.text)
    if not isinstance(user_history.get(message.from_user.id), list):
        user_history[message.from_user.id] = []
    user_history[message.from_user.id].append(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {message.text}")
    await message.answer(result)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ñ–∞–Ω—Ä—ã"
@dp.message(F.text.lower() == "üìö –∂–∞–Ω—Ä—ã")
async def genre_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üìö –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=genres_kb)

@dp.callback_query(F.data.startswith("genre_"))
async def genre_callback(callback: types.CallbackQuery):
    genre = callback.data.replace("genre_", "")
    await callback.message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}...")
    result = await get_movie_recommendation(f"–§–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}")
    if not isinstance(user_history.get(callback.from_user.id), list):
        user_history[callback.from_user.id] = []
    user_history[callback.from_user.id].append(f"–ñ–∞–Ω—Ä: {genre}")
    await callback.message.answer(result, reply_markup=reaction_kb)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@dp.message(F.text.lower() == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_kb)

@dp.callback_query(F.data == "subscribe")
async def subscribe_callback(callback: types.CallbackQuery):
    user_subscriptions.add(callback.from_user.id)
    await callback.message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")
    await callback.answer()

@dp.callback_query(F.data == "unsubscribe")
async def unsubscribe_callback(callback: types.CallbackQuery):
    user_subscriptions.discard(callback.from_user.id)
    await callback.message.answer("üö´ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç '–§–∏–ª—å–º–∞ –¥–Ω—è'.")
    await callback.answer()

@dp.callback_query(F.data == "go_home")
async def go_home_callback(callback: types.CallbackQuery):
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥"
@dp.message(F.text.lower() == "üîô –Ω–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"
@dp.message(F.text.lower() == "üéû –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def history_handler(message: types.Message, state: FSMContext):
    await state.clear()
    history = user_history.get(message.from_user.id, [])
    if not isinstance(history, list):
        history = []
        user_history[message.from_user.id] = history
    filtered_history = [str(item) for item in history if item is not None]
    text = "\n".join(filtered_history) if filtered_history else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    await message.answer(f"üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
@dp.message(F.text.lower() == "‚≠ê –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def favorites_handler(message: types.Message, state: FSMContext):
    await state.clear()
    favorites = user_favorites.get(message.from_user.id, [])
    text = "\n".join(favorites) if favorites else "‚≠ê –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç."
    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(F.text.lower() == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message, state: FSMContext):
    await state.clear()
    reactions = user_reactions.get(message.from_user.id, {"like": 0, "dislike": 0})
    favs = len(user_favorites.get(message.from_user.id, []))
    await message.answer(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüëç –õ–∞–π–∫–æ–≤: {reactions['like']}\nüëé –î–∏–∑–ª–∞–π–∫–æ–≤: {reactions['dislike']}\n‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {favs}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ò–ò-—á–∞—Ç"
@dp.message(F.text.lower() == "üß† –∏–∏-—á–∞—Ç")
async def ai_chat_prompt(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üß† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –ò–ò-—ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ —Ñ–∏–ª—å–º–∞–º:")
    await state.set_state(UserStates.AIChat)

@dp.message(UserStates.AIChat)
async def handle_ai_chat(message: types.Message, state: FSMContext):
    await message.answer("üîé –ò—â—É –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò...")
    result = await get_movie_recommendation(message.text)
    if not isinstance(user_history.get(message.from_user.id), list):
        user_history[message.from_user.id] = []
    user_history[message.from_user.id].append(f"–ò–ò-—á–∞—Ç: {message.text}")
    await message.answer(result)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
@dp.callback_query(F.data == "like")
async def like_handler(callback: types.CallbackQuery):
    user_reactions.setdefault(callback.from_user.id, {"like": 0, "dislike": 0})["like"] += 1
    await callback.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!")

@dp.callback_query(F.data == "dislike")
async def dislike_handler(callback: types.CallbackQuery):
    user_reactions.setdefault(callback.from_user.id, {"like": 0, "dislike": 0})["dislike"] += 1
    await callback.answer("üëé –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

@dp.callback_query(F.data == "add_favorite")
async def favorite_handler(callback: types.CallbackQuery):
    message_text = callback.message.text.split('\n')[0].replace("üé¨ ", "").strip()
    user_favorites.setdefault(callback.from_user.id, []).append(message_text)
    await callback.answer("üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def send_daily_recommendation():
    if user_subscriptions:
        text, title = await get_tmdb_trending_movie()
        for uid in user_subscriptions:
            try:
                if title:
                    if not isinstance(user_history.get(uid), list):
                        user_history[uid] = []
                    user_history[uid].append(title)
                await bot.send_message(uid, f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üé¨ –§–∏–ª—å–º –¥–Ω—è –æ—Ç ScreenFox:\n\n{text}", reply_markup=reaction_kb)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    dp.message.middleware(UserHistoryMiddleware(user_history))
    dp.include_router(watch_later_router)
    register_handlers_guess_movie(dp, user_states, user_history)
    register_handlers_thematic(dp)
    register_handlers_director_actor(dp)
    register_handlers_company(dp, user_history, get_movie_recommendation)
    register_handlers_movie_description(dp, get_movie_recommendation)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
    scheduler.add_job(send_daily_recommendation, trigger='cron', hour=9, minute=0)
    scheduler.start()
    logging.info("‚úÖ ScreenFox –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())